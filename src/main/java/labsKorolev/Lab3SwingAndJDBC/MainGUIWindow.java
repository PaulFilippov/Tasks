package labsKorolev.Lab3SwingAndJDBC;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

import labsKorolev.Lab3SwingAndJDBC.Entities.*;
import labsKorolev.Lab3SwingAndJDBC.DAO.*;
import labsKorolev.Lab3SwingAndJDBC.TableModels.*;

public class MainGUIWindow extends JFrame {

    private JPanel rootPanel;
    private JPanel PanelSearchElements;
    private JPanel PanelTableChoice;
    private JButton buttonSearchPhone;
    private JTextField TextFieldForID;
    private JComboBox comboBox1;
    private JTable table1;

    VusDAO vusDAO;
    SpecDAO specDAO;
    SotrDAO sotrDAO;

    private static Connection conn = null;


    //конструктор
    public MainGUIWindow() {

        super("MainGUIWindow");

        conn = new JDBCconnectService().connectToBase();

        // create the DAO
        try {
            vusDAO = new VusDAO();
            specDAO = new SpecDAO();
            sotrDAO = new SotrDAO();
        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }

        $$$setupUI$$$();
        this.setBounds(200, 200, 400, 400);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setContentPane(rootPanel);
        setVisible(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        comboBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jCombobox1ActionPerformed(e);
            }
        });

        buttonSearchPhone.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnSearchAct(e);
            }
        });
    }

    //обработка нажатия на кнопку поиска по id
    public void btnSearchAct(ActionEvent e) {
        try {
            List<Sotr> sotr = null;
            sotr = sotrDAO.searchSotrs(conn, Integer.parseInt(TextFieldForID.getText()));
            System.out.println(sotr.toString());
            // create the model and update the "table"
            SotrTableModel model_sotr = new SotrTableModel(sotr);
            table1.setModel(model_sotr);
        } catch (Exception exBtxvus) {
            System.err.println(exBtxvus);
        }
    }

    //обработка комбобокса
    public void jCombobox1ActionPerformed(ActionEvent e) {
        try {
            switch ((String) comboBox1.getSelectedItem()) {
                case "Вуз":
                    List<Vus> vus = null;
                    vus = vusDAO.getAllVus(conn);
                    System.out.println(vus.toString());
                    // create the model and update the "table"
                    VusTableModel model_vus = new VusTableModel(vus);
                    table1.setModel(model_vus);
                    break;
                case "Специальности":
                    List<Spec> spec = null;
                    spec = specDAO.getAllSpec(conn);
                    System.out.println(spec.toString());
                    // create the model and update the "table"
                    SpecTableModel model_spec = new SpecTableModel(spec);
                    table1.setModel(model_spec);
                    break;
                case "Сотрудники":
                    List<Sotr> sotr = null;
                    sotr = sotrDAO.getAllSotr(conn);
                    System.out.println(sotr.toString());
                    // create the model and update the "table"
                    SotrTableModel model_sotr = new SotrTableModel(sotr);
                    table1.setModel(model_sotr);
                    break;
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
    }

    public static void main(String[] args) {

        MainGUIWindow guiWindow = new MainGUIWindow();

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        PanelSearchElements = new JPanel();
        PanelSearchElements.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(PanelSearchElements, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        TextFieldForID = new JTextField();
        TextFieldForID.setText("Enter ID Sotr");
        PanelSearchElements.add(TextFieldForID, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonSearchPhone = new JButton();
        buttonSearchPhone.setText("Search");
        PanelSearchElements.add(buttonSearchPhone, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        PanelTableChoice = new JPanel();
        PanelTableChoice.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(PanelTableChoice, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Вуз");
        defaultComboBoxModel1.addElement("Сотрудники");
        defaultComboBoxModel1.addElement("Специальности");
        comboBox1.setModel(defaultComboBoxModel1);
        PanelTableChoice.add(comboBox1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
